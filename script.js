// –î–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–µ
let animeList = [
    {
        title: "–ê—Ç–∞–∫–∞ –¢–∏—Ç–∞–Ω–æ–≤",
        studio: "Wit Studio, MAPPA",
        description: "–≠—Ä–µ–Ω –ô–µ–≥–µ—Ä –∏ –µ–≥–æ –¥—Ä—É–∑—å—è —Å—Ä–∞–∂–∞—é—Ç—Å—è —Å —Ç–∏—Ç–∞–Ω–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å –≤ –∂–µ—Å—Ç–æ–∫–æ–º –º–∏—Ä–µ. –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ —Ç–∏—Ç–∞–Ω—ã –ø—Ä–æ—Ä—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç–µ–Ω—ã, –∑–∞—â–∏—â–∞—é—â–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ. –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π, –≠—Ä–µ–Ω –ô–µ–≥–µ—Ä, –∫–ª—è–Ω–µ—Ç—Å—è —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç–∏—Ç–∞–Ω–æ–≤ –∏ —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É –æ —Å–≤–æ–µ–º –º–∏—Ä–µ.",
        voiceType: "dub",
        voiceYear: 2023,
        poster: "https://via.placeholder.com/1000x1500/ffeef2/d63384?text=–ê—Ç–∞–∫–∞+–¢–∏—Ç–∞–Ω–æ–≤",
        voiceActors: [
            "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ - –≠—Ä–µ–Ω –ô–µ–≥–µ—Ä",
            "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞ - –ú–∏–∫–∞—Å–∞ –ê–∫–∫–µ—Ä–º–∞–Ω",
            "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤ - –ê—Ä–º–∏–Ω –ê—Ä–ª–µ—Ä—Ç",
            "–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞ - –õ–µ–≤–∏ –ê–∫–∫–µ—Ä–º–∞–Ω"
        ],
        rating: 4.8,
        userRatings: [
            { userId: "user1", rating: 5 },
            { userId: "user2", rating: 4 },
            { userId: "user3", rating: 5 }
        ],
        isBest: true,
        seasons: [
            {
                name: "–°–µ–∑–æ–Ω 1",
                episodes: 25,
                link: "https://shikimori.one/animes/16498-shingeki-no-kyojin/season1"
            },
            {
                name: "–°–µ–∑–æ–Ω 2",
                episodes: 12,
                link: "https://shikimori.one/animes/16498-shingeki-no-kyojin/season2"
            }
        ],
        specials: [
            {
                name: "OVA: Ilse's Notebook",
                episodes: 1,
                link: "https://shikimori.one/animes/10408"
            },
            {
                name: "OVA: A Choice with No Regrets",
                episodes: 2,
                link: "https://shikimori.one/animes/20954"
            }
        ],
        comments: [
            {
                author: "–ê–ª–µ–∫—Å–µ–π",
                avatar: "https://via.placeholder.com/40/ffeef2/d63384?text=A",
                text: "–û—Ç–ª–∏—á–Ω–∞—è –æ–∑–≤—É—á–∫–∞! –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞ –∞–∫—Ç–µ—Ä–æ–≤.",
                date: "2024-01-15 14:30"
            }
        ]
    }
];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_PASSWORD = "admin123";
let isAdmin = false;
let currentFilter = 'all';
let currentBestFilter = false;
let currentYearFilter = 'none';
let currentEditIndex = -1;

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let users = [];
let currentUser = null;
let isLoggedIn = false;

// –§–æ–Ω—ã
const backgrounds = [
    { name: "–†–æ–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç", value: "linear-gradient(135deg, #fff5f7, #ffeef2)" },
    { name: "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", value: "linear-gradient(135deg, #667eea, #764ba2)" },
    { name: "–û—Ä–∞–Ω–∂–µ–≤—ã–π", value: "linear-gradient(135deg, #f093fb, #f5576c)" },
    { name: "–°–∏–Ω–∏–π", value: "linear-gradient(135deg, #4facfe, #00f2fe)" },
    { name: "–ó–µ–ª–µ–Ω—ã–π", value: "linear-gradient(135deg, #43e97b, #38f9d7)" },
    { name: "–¢–µ–º–Ω—ã–π", value: "linear-gradient(135deg, #2c3e50, #3498db)" }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    loadFromLocalStorage();
    loadUsersFromLocalStorage();
    setupEventListeners();
    setupRatingStars();
    updateUI();
    displayAnimeList(animeList);
    updateFilterButtons();
    setupBackgrounds();
}

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function registerUser(username, password) {
    if (users.find(user => user.username === username)) {
        return { success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" };
    }
    
    const newUser = {
        id: generateId(),
        username: username,
        password: password,
        avatar: `https://via.placeholder.com/80/ffeef2/d63384?text=${username.charAt(0).toUpperCase()}`,
        joinDate: new Date().toISOString()
    };
    
    users.push(newUser);
    saveUsersToLocalStorage();
    return { success: true, message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" };
}

function loginUser(username, password) {
    const user = users.find(u => u.username === username && u.password === password);
    if (user) {
        currentUser = user;
        isLoggedIn = true;
        saveCurrentUserToLocalStorage();
        return { success: true, message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!" };
    }
    return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" };
}

function logoutUser() {
    currentUser = null;
    isLoggedIn = false;
    saveCurrentUserToLocalStorage();
    updateUI();
}

// –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫
function rateAnime(animeIndex, rating) {
    if (!isLoggedIn) {
        showNotification("–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∏–º–µ");
        return;
    }
    
    const anime = animeList[animeIndex];
    const existingRatingIndex = anime.userRatings.findIndex(r => r.userId === currentUser.id);
    
    if (existingRatingIndex !== -1) {
        anime.userRatings[existingRatingIndex].rating = rating;
    } else {
        anime.userRatings.push({
            userId: currentUser.id,
            rating: rating
        });
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const totalRating = anime.userRatings.reduce((sum, r) => sum + r.rating, 0);
    anime.rating = totalRating / anime.userRatings.length;
    
    saveToLocalStorage();
    displayAnimeList(animeList);
    showNotification(`–í—ã –æ—Ü–µ–Ω–∏–ª–∏ "${anime.title}" –Ω–∞ ${rating}‚≠ê`);
}

function getUserRating(animeIndex) {
    if (!isLoggedIn || !animeList[animeIndex].userRatings) return 0;
    const userRating = animeList[animeIndex].userRatings.find(r => r.userId === currentUser.id);
    return userRating ? userRating.rating : 0;
}

// OVA/ONA/–°–ø–µ—à–ª—ã
function generateSpecialsHTML(anime, index) {
    if (!anime.specials || anime.specials.length === 0) return '';
    
    const specialsList = anime.specials.map(special => `
        <div class="special-item" onclick="window.open('${special.link}', '_blank')">
            <span class="special-name">${special.name}</span>
            <span class="special-episodes">(${special.episodes} —ç–ø.)</span>
        </div>
    `).join('');
    
    return `
        <div class="toggle-specials" onclick="toggleSpecials(this)">
            üì∫ –°–ø–µ—à–ª—ã/OVA (${anime.specials.length})
        </div>
        <div class="specials-section">
            <div class="specials-title">üé¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã</div>
            ${specialsList}
        </div>
    `;
}

function toggleSpecials(element) {
    const animeItem = element.closest('.anime-item');
    const specialsSection = animeItem.querySelector('.specials-section');
    const isVisible = specialsSection.style.display !== 'none';
    
    if (isVisible) {
        specialsSection.style.display = 'none';
        element.textContent = `üì∫ –°–ø–µ—à–ª—ã/OVA (${animeItem.querySelectorAll('.special-item').length})`;
    } else {
        specialsSection.style.display = 'block';
        element.textContent = 'üì∫ –°–∫—Ä—ã—Ç—å —Å–ø–µ—à–ª—ã';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ
function displayAnimeList(list) {
    const animeListElement = document.getElementById('animeList');
    animeListElement.innerHTML = '';
    
    const filteredList = filterAnimeList(list);
    
    if (filteredList.length === 0) {
        animeListElement.innerHTML = `
            <div class="empty-state">
                <h3>üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∞–Ω–∏–º–µ</p>
            </div>
        `;
        return;
    }
    
    filteredList.forEach((anime, index) => {
        const stars = '‚≠ê'.repeat(Math.round(anime.rating)) + '‚òÜ'.repeat(5 - Math.round(anime.rating));
        const userRating = getUserRating(index);
        
        const animeItem = document.createElement('div');
        animeItem.className = 'anime-item';
        animeItem.innerHTML = generateAnimeItemHTML(anime, index, stars, userRating);
        animeListElement.appendChild(animeItem);
    });
}

function generateAnimeItemHTML(anime, index, stars, userRating) {
    return `
        <div class="anime-poster-container">
            <img src="${anime.poster}" alt="${anime.title}" class="anime-poster" 
                 onerror="this.src='https://via.placeholder.com/1000x1500/ffeef2/d63384?text=–ü–æ—Å—Ç–µ—Ä'">
            <div class="anime-actions">
                ${generateSeasonsHTML(anime, index)}
                <button class="edit-btn" onclick="editAnime(${index})" ${!isAdmin ? 'disabled' : ''}>
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button class="delete-btn" onclick="deleteAnime(${index})" ${!isAdmin ? 'disabled' : ''}>
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
        <div class="anime-content">
            <div class="anime-title">${anime.title}</div>
            <div class="anime-info">
                <span class="studio">${anime.studio}</span>
                <span class="voice-type ${anime.voiceType}">
                    ${getVoiceTypeText(anime.voiceType)}
                </span>
                <span class="voice-year">${anime.voiceYear} –≥–æ–¥</span>
                ${anime.rating > 0 ? `
                    <span class="rating">${stars} (${anime.rating.toFixed(1)})</span>
                ` : ''}
            </div>
            
            <!-- –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ -->
            <div class="rating-system">
                <div class="rating-title">–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞</div>
                <div class="user-rating">
                    <div class="user-rating-stars">
                        ${[1,2,3,4,5].map(star => `
                            <span class="user-rating-star ${star <= userRating ? 'active' : ''}" 
                                  onclick="rateAnime(${index}, ${star})">
                                ${star <= userRating ? '‚≠ê' : '‚òÜ'}
                            </span>
                        `).join('')}
                    </div>
                </div>
                <div class="rating-stats">
                    <span class="rating-average">–°—Ä–µ–¥–Ω—è—è: ${anime.rating.toFixed(1)}</span>
                    <span class="rating-count">–û—Ü–µ–Ω–æ–∫: ${anime.userRatings ? anime.userRatings.length : 0}</span>
                </div>
            </div>
            
            <div class="description">${anime.description}</div>
            
            ${generateSpecialsHTML(anime, index)}
            
            <div class="toggle-details" onclick="toggleDetails(this)">
                üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
            </div>
            
            <div class="details-section">
                ${generateVoiceActorsHTML(anime)}
                ${generateCommentsHTML(anime, index, 2)}
            </div>
        </div>
    `;
}

// –§–æ–Ω—ã
function setupBackgrounds() {
    const container = document.getElementById('backgroundOptions');
    backgrounds.forEach((bg, index) => {
        const option = document.createElement('div');
        option.className = 'background-option';
        option.style.background = bg.value;
        option.onclick = () => changeBackground(bg.value);
        container.appendChild(option);
    });
}

function changeBackground(background) {
    document.body.style.background = background;
    localStorage.setItem('userBackground', background);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

function filterAnimeList(list) {
    let filtered = [...list];
    
    if (currentFilter !== 'all') {
        filtered = filtered.filter(anime => anime.voiceType === currentFilter);
    }
    
    if (currentBestFilter) {
        filtered = filtered.filter(anime => anime.isBest === true);
    }
    
    if (currentYearFilter === 'newest') {
        filtered.sort((a, b) => b.voiceYear - a.voiceYear);
    } else if (currentYearFilter === 'oldest') {
        filtered.sort((a, b) => a.voiceYear - b.voiceYear);
    }
    
    return filtered;
}

function updateUI() {
    updateAdminUI();
    updateUserUI();
    updateAuthUI();
}

function updateUserUI() {
    document.body.classList.toggle('user-mode', !isAdmin);
}

function updateAuthUI() {
    const authSection = document.querySelector('.user-auth-section');
    if (isLoggedIn && currentUser) {
        authSection.innerHTML = `
            <h2 class="profile-title">üë§ ${currentUser.username}</h2>
            <div class="profile-form">
                <img src="${currentUser.avatar}" alt="–ê–≤–∞—Ç–∞—Ä" class="profile-avatar" id="userAvatar">
                <button class="save-profile" onclick="logoutUser()">üö™ –í—ã–π—Ç–∏</button>
            </div>
        `;
    }
}

// Local Storage
function saveToLocalStorage() {
    localStorage.setItem('animeList', JSON.stringify(animeList));
}

function loadFromLocalStorage() {
    const saved = localStorage.getItem('animeList');
    if (saved) {
        animeList = JSON.parse(saved);
    }
    
    const savedBackground = localStorage.getItem('userBackground');
    if (savedBackground) {
        document.body.style.background = savedBackground;
    }
}

function saveUsersToLocalStorage() {
    localStorage.setItem('users', JSON.stringify(users));
}

function loadUsersFromLocalStorage() {
    const saved = localStorage.getItem('users');
    if (saved) {
        users = JSON.parse(saved);
    }
}

function saveCurrentUserToLocalStorage() {
    localStorage.setItem('currentUser', JSON.stringify(currentUser));
    localStorage.setItem('isLoggedIn', isLoggedIn);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', init);
