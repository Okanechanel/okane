// –î–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–µ
let animeList = [
    {
        title: "–ê—Ç–∞–∫–∞ –¢–∏—Ç–∞–Ω–æ–≤",
        studio: "Wit Studio, MAPPA",
        description: "–≠—Ä–µ–Ω –ô–µ–≥–µ—Ä –∏ –µ–≥–æ –¥—Ä—É–∑—å—è —Å—Ä–∞–∂–∞—é—Ç—Å—è —Å —Ç–∏—Ç–∞–Ω–∞–º–∏, —á—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å –≤ –∂–µ—Å—Ç–æ–∫–æ–º –º–∏—Ä–µ. –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ —Ç–∏—Ç–∞–Ω—ã –ø—Ä–æ—Ä—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç–µ–Ω—ã, –∑–∞—â–∏—â–∞—é—â–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ. –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π, –≠—Ä–µ–Ω –ô–µ–≥–µ—Ä, –∫–ª—è–Ω–µ—Ç—Å—è —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≤—Å–µ—Ö —Ç–∏—Ç–∞–Ω–æ–≤ –∏ —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É –æ —Å–≤–æ–µ–º –º–∏—Ä–µ.",
        voiceType: "dub",
        voiceYear: 2023,
        poster: "https://via.placeholder.com/1000x1500/ffeef2/d63384?text=–ê—Ç–∞–∫–∞+–¢–∏—Ç–∞–Ω–æ–≤",
        voiceActors: [
            "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ - –≠—Ä–µ–Ω –ô–µ–≥–µ—Ä",
            "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞ - –ú–∏–∫–∞—Å–∞ –ê–∫–∫–µ—Ä–º–∞–Ω",
            "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤ - –ê—Ä–º–∏–Ω –ê—Ä–ª–µ—Ä—Ç",
            "–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞ - –õ–µ–≤–∏ –ê–∫–∫–µ—Ä–º–∞–Ω"
        ],
        rating: 4.8,
        userRatings: [
            { userId: "user1", rating: 5 },
            { userId: "user2", rating: 4 },
            { userId: "user3", rating: 5 }
        ],
        isBest: true,
        seasons: [
            {
                name: "–°–µ–∑–æ–Ω 1",
                episodes: 25,
                link: "https://shikimori.one/animes/16498-shingeki-no-kyojin/season1"
            },
            {
                name: "–°–µ–∑–æ–Ω 2",
                episodes: 12,
                link: "https://shikimori.one/animes/16498-shingeki-no-kyojin/season2"
            }
        ],
        specials: [
            {
                name: "OVA: Ilse's Notebook",
                episodes: 1,
                link: "https://shikimori.one/animes/10408"
            },
            {
                name: "OVA: A Choice with No Regrets",
                episodes: 2,
                link: "https://shikimori.one/animes/20954"
            }
        ],
        comments: [
            {
                author: "–ê–ª–µ–∫—Å–µ–π",
                avatar: "https://via.placeholder.com/40/ffeef2/d63384?text=A",
                text: "–û—Ç–ª–∏—á–Ω–∞—è –æ–∑–≤—É—á–∫–∞! –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞ –∞–∫—Ç–µ—Ä–æ–≤.",
                date: "2024-01-15 14:30"
            }
        ]
    },
    {
        title: "–í–∞–Ω –ü–∏—Å",
        studio: "Toei Animation",
        description: "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –õ—É—Ñ—Ñ–∏ –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã –ø–∏—Ä–∞—Ç–æ–≤ –≤ –ø–æ–∏—Å–∫–∞—Ö –≤–µ–ª–∏—á–∞–π—à–µ–≥–æ —Å–æ–∫—Ä–æ–≤–∏—â–∞ - –í–∞–Ω –ü–∏—Å. –ú–æ–Ω–∫–∏ –î. –õ—É—Ñ—Ñ–∏, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç —Å —Ç–µ–ª–æ–º —Ä–µ–∑–∏–Ω—ã –ø–æ—Å–ª–µ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –î—å—è–≤–æ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –ì—Ä–∞–Ω–¥ –õ–∞–π–Ω, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ö–æ—Ä–æ–ª–µ–º –ü–∏—Ä–∞—Ç–æ–≤.",
        voiceType: "recap",
        voiceYear: 2021,
        poster: "https://via.placeholder.com/1000x1500/ffeef2/d63384?text=–í–∞–Ω+–ü–∏—Å",
        voiceActors: [
            "–°–µ—Ä–≥–µ–π –ë–µ–ª–æ–≤ - –ú–æ–Ω–∫–∏ –î. –õ—É—Ñ—Ñ–∏",
            "–û–ª—å–≥–∞ –°–µ–º–µ–Ω–æ–≤–∞ - –ù–∞–º–∏",
            "–î–º–∏—Ç—Ä–∏–π –ù–æ–≤–∏–∫–æ–≤ - –†–æ—Ä–æ–Ω–æ–∞ –ó–æ—Ä–æ",
            "–ï–ª–µ–Ω–∞ –í–æ—Ä–æ–Ω–æ–≤–∞ - –í–∏–Ω—Å–º–æ–∫ –°–∞–Ω–¥–∂–∏"
        ],
        rating: 4.5,
        userRatings: [
            { userId: "user1", rating: 5 },
            { userId: "user2", rating: 4 }
        ],
        isBest: true,
        seasons: [
            {
                name: "–í–æ—Å—Ç–æ—á–Ω–æ–µ –°–∏–Ω–µ–µ –º–æ—Ä–µ",
                episodes: 61,
                link: "https://shikimori.one/animes/21-one-piece/season1"
            }
        ],
        specials: [
            {
                name: "OVA: Defeat Him! The Pirate Ganzack!",
                episodes: 1,
                link: "https://shikimori.one/animes/1931"
            }
        ],
        comments: []
    }
];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_PASSWORD = "admin123";
let isAdmin = false;
let currentFilter = 'all';
let currentBestFilter = false;
let currentYearFilter = 'none';
let currentEditIndex = -1;

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let users = [];
let currentUser = null;
let isLoggedIn = false;

// –§–æ–Ω—ã
const backgrounds = [
    { name: "–†–æ–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç", value: "linear-gradient(135deg, #fff5f7, #ffeef2)" },
    { name: "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", value: "linear-gradient(135deg, #667eea, #764ba2)" },
    { name: "–û—Ä–∞–Ω–∂–µ–≤—ã–π", value: "linear-gradient(135deg, #f093fb, #f5576c)" },
    { name: "–°–∏–Ω–∏–π", value: "linear-gradient(135deg, #4facfe, #00f2fe)" },
    { name: "–ó–µ–ª–µ–Ω—ã–π", value: "linear-gradient(135deg, #43e97b, #38f9d7)" },
    { name: "–¢–µ–º–Ω—ã–π", value: "linear-gradient(135deg, #2c3e50, #3498db)" }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    loadFromLocalStorage();
    loadUsersFromLocalStorage();
    loadCurrentUserFromLocalStorage();
    setupEventListeners();
    setupRatingStars();
    updateUI();
    displayAnimeList(animeList);
    updateFilterButtons();
    setupBackgrounds();
}

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function switchAuthTab(tab) {
    document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.auth-content').forEach(c => c.classList.remove('active'));
    
    document.querySelector(`.auth-tab[onclick="switchAuthTab('${tab}')"]`).classList.add('active');
    document.getElementById(`${tab}Content`).classList.add('active');
}

function handleRegister() {
    const username = document.getElementById('registerUsername').value.trim();
    const password = document.getElementById('registerPassword').value.trim();
    
    if (!username || !password) {
        showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
        return;
    }
    
    const result = registerUser(username, password);
    showNotification(result.message);
    
    if (result.success) {
        document.getElementById('registerUsername').value = '';
        document.getElementById('registerPassword').value = '';
        switchAuthTab('login');
    }
}

function handleLogin() {
    const username = document.getElementById('loginUsername').value.trim();
    const password = document.getElementById('loginPassword').value.trim();
    
    if (!username || !password) {
        showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
        return;
    }
    
    const result = loginUser(username, password);
    showNotification(result.message);
    
    if (result.success) {
        document.getElementById('loginUsername').value = '';
        document.getElementById('loginPassword').value = '';
        updateUI();
    }
}

function registerUser(username, password) {
    if (users.find(user => user.username === username)) {
        return { success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" };
    }
    
    const newUser = {
        id: generateId(),
        username: username,
        password: password,
        avatar: `https://via.placeholder.com/80/ffeef2/d63384?text=${username.charAt(0).toUpperCase()}`,
        joinDate: new Date().toISOString()
    };
    
    users.push(newUser);
    saveUsersToLocalStorage();
    return { success: true, message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" };
}

function loginUser(username, password) {
    const user = users.find(u => u.username === username && u.password === password);
    if (user) {
        currentUser = user;
        isLoggedIn = true;
        saveCurrentUserToLocalStorage();
        return { success: true, message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!" };
    }
    return { success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" };
}

function logoutUser() {
    currentUser = null;
    isLoggedIn = false;
    saveCurrentUserToLocalStorage();
    updateUI();
    showNotification("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
}

// –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫
function rateAnime(animeIndex, rating) {
    if (!isLoggedIn) {
        showNotification("–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∏–º–µ");
        return;
    }
    
    const anime = animeList[animeIndex];
    if (!anime.userRatings) {
        anime.userRatings = [];
    }
    
    const existingRatingIndex = anime.userRatings.findIndex(r => r.userId === currentUser.id);
    
    if (existingRatingIndex !== -1) {
        anime.userRatings[existingRatingIndex].rating = rating;
    } else {
        anime.userRatings.push({
            userId: currentUser.id,
            rating: rating
        });
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const totalRating = anime.userRatings.reduce((sum, r) => sum + r.rating, 0);
    anime.rating = totalRating / anime.userRatings.length;
    
    saveToLocalStorage();
    displayAnimeList(animeList);
    showNotification(`–í—ã –æ—Ü–µ–Ω–∏–ª–∏ "${anime.title}" –Ω–∞ ${rating}‚≠ê`);
}

function getUserRating(animeIndex) {
    if (!isLoggedIn || !animeList[animeIndex].userRatings) return 0;
    const userRating = animeList[animeIndex].userRatings.find(r => r.userId === currentUser.id);
    return userRating ? userRating.rating : 0;
}

// OVA/ONA/–°–ø–µ—à–ª—ã
function generateSpecialsHTML(anime, index) {
    if (!anime.specials || anime.specials.length === 0) return '';
    
    const specialsList = anime.specials.map(special => `
        <div class="special-item" onclick="window.open('${special.link}', '_blank')">
            <span class="special-name">${special.name}</span>
            <span class="special-episodes">(${special.episodes} —ç–ø.)</span>
        </div>
    `).join('');
    
    return `
        <div class="toggle-specials" onclick="toggleSpecials(this)">
            üì∫ –°–ø–µ—à–ª—ã/OVA (${anime.specials.length})
        </div>
        <div class="specials-section">
            <div class="specials-title">üé¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã</div>
            ${specialsList}
        </div>
    `;
}

function toggleSpecials(element) {
    const animeItem = element.closest('.anime-item');
    const specialsSection = animeItem.querySelector('.specials-section');
    const isVisible = specialsSection.style.display !== 'none';
    
    if (isVisible) {
        specialsSection.style.display = 'none';
        element.textContent = `üì∫ –°–ø–µ—à–ª—ã/OVA (${animeItem.querySelectorAll('.special-item').length})`;
    } else {
        specialsSection.style.display = 'block';
        element.textContent = 'üì∫ –°–∫—Ä—ã—Ç—å —Å–ø–µ—à–ª—ã';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ
function displayAnimeList(list) {
    const animeListElement = document.getElementById('animeList');
    animeListElement.innerHTML = '';
    
    const filteredList = filterAnimeList(list);
    
    if (filteredList.length === 0) {
        animeListElement.innerHTML = `
            <div class="empty-state">
                <h3>üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∞–Ω–∏–º–µ</p>
            </div>
        `;
        return;
    }
    
    filteredList.forEach((anime, index) => {
        const stars = '‚≠ê'.repeat(Math.round(anime.rating)) + '‚òÜ'.repeat(5 - Math.round(anime.rating));
        const userRating = getUserRating(index);
        
        const animeItem = document.createElement('div');
        animeItem.className = 'anime-item';
        animeItem.innerHTML = generateAnimeItemHTML(anime, index, stars, userRating);
        animeListElement.appendChild(animeItem);
    });
}

function generateAnimeItemHTML(anime, index, stars, userRating) {
    const voiceActorsHTML = anime.voiceActors && anime.voiceActors.length > 0 ? `
        <div class="voice-actors">
            <div class="voice-actors-title">üé≠ –ê–∫—Ç–µ—Ä—ã –æ–∑–≤—É—á–∫–∏:</div>
            ${anime.voiceActors.map(actor => `
                <div class="voice-actor">‚Ä¢ ${actor}</div>
            `).join('')}
        </div>
    ` : '';

    const commentsHTML = generateCommentsHTML(anime, index, 2);
    const showMoreButton = anime.comments && anime.comments.length > 2 ? 
        `<button class="show-more-comments" onclick="showAllComments(${index})">
            üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (${anime.comments.length})
        </button>` : '';

    return `
        <div class="anime-poster-container">
            <img src="${anime.poster}" alt="${anime.title}" class="anime-poster" 
                 onerror="this.src='https://via.placeholder.com/1000x1500/ffeef2/d63384?text=–ü–æ—Å—Ç–µ—Ä'">
            <div class="anime-actions">
                ${generateSeasonsHTML(anime, index)}
                <button class="edit-btn" onclick="editAnime(${index})" ${!isAdmin ? 'disabled' : ''}>
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button class="delete-btn" onclick="deleteAnime(${index})" ${!isAdmin ? 'disabled' : ''}>
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
        <div class="anime-content">
            <div class="anime-title">${anime.title}</div>
            <div class="anime-info">
                <span class="studio">${anime.studio}</span>
                <span class="voice-type ${anime.voiceType}">
                    ${getVoiceTypeText(anime.voiceType)}
                </span>
                <span class="voice-year">${anime.voiceYear} –≥–æ–¥</span>
                ${anime.rating > 0 ? `
                    <span class="rating">${stars} (${anime.rating.toFixed(1)})</span>
                ` : ''}
            </div>
            
            <!-- –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ -->
            <div class="rating-system">
                <div class="rating-title">–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞</div>
                <div class="user-rating">
                    <div class="user-rating-stars">
                        ${[1,2,3,4,5].map(star => `
                            <span class="user-rating-star ${star <= userRating ? 'active' : ''}" 
                                  onclick="rateAnime(${index}, ${star})">
                                ${star <= userRating ? '‚≠ê' : '‚òÜ'}
                            </span>
                        `).join('')}
                    </div>
                </div>
                <div class="rating-stats">
                    <span class="rating-average">–°—Ä–µ–¥–Ω—è—è: ${anime.rating.toFixed(1)}</span>
                    <span class="rating-count">–û—Ü–µ–Ω–æ–∫: ${anime.userRatings ? anime.userRatings.length : 0}</span>
                </div>
            </div>
            
            <div class="description">${anime.description}</div>
            
            ${generateSpecialsHTML(anime, index)}
            
            <div class="toggle-details" onclick="toggleDetails(this)">
                üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
            </div>
            
            <div class="details-section">
                ${voiceActorsHTML}
                
                <!-- –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ -->
                <div class="comments-section">
                    <div class="comments-title" onclick="toggleComments(this)">
                        üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ 
                        <span style="font-size: 12px; color: #868e96;">(${anime.comments ? anime.comments.length : 0})</span>
                    </div>
                    
                    <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è -->
                    <div class="comment-form">
                        <textarea class="comment-input" placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." id="commentInput-${index}"></textarea>
                        <button class="submit-comment" onclick="addComment(${index})">
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        </button>
                    </div>
                    
                    <!-- –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ -->
                    <div class="comments-list">
                        ${commentsHTML}
                    </div>
                    ${showMoreButton}
                </div>
            </div>
        </div>
    `;
}

// –§–æ–Ω—ã
function setupBackgrounds() {
    const container = document.getElementById('backgroundOptions');
    backgrounds.forEach((bg, index) => {
        const option = document.createElement('div');
        option.className = 'background-option';
        option.style.background = bg.value;
        option.onclick = () => changeBackground(bg.value);
        container.appendChild(option);
    });
}

function changeBackground(background) {
    document.body.style.background = background;
    localStorage.setItem('userBackground', background);
    showNotification("–§–æ–Ω –∏–∑–º–µ–Ω–µ–Ω!");
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

function filterAnimeList(list) {
    let filtered = [...list];
    
    if (currentFilter !== 'all') {
        filtered = filtered.filter(anime => anime.voiceType === currentFilter);
    }
    
    if (currentBestFilter) {
        filtered = filtered.filter(anime => anime.isBest === true);
    }
    
    if (currentYearFilter === 'newest') {
        filtered.sort((a, b) => b.voiceYear - a.voiceYear);
    } else if (currentYearFilter === 'oldest') {
        filtered.sort((a, b) => a.voiceYear - b.voiceYear);
    }
    
    return filtered;
}

function updateUI() {
    updateAdminUI();
    updateUserUI();
    updateAuthUI();
}

function updateUserUI() {
    document.body.classList.toggle('user-mode', !isAdmin);
}

function updateAuthUI() {
    const authSection = document.getElementById('userAuthSection');
    const profileSection = document.getElementById('userProfile');
    
    if (isLoggedIn && currentUser) {
        authSection.style.display = 'none';
        profileSection.style.display = 'block';
        document.getElementById('profileUsername').textContent = `üë§ ${currentUser.username}`;
        document.getElementById('userAvatar').src = currentUser.avatar;
    } else {
        authSection.style.display = 'block';
        profileSection.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —Å–µ–∑–æ–Ω–æ–≤
function generateSeasonsHTML(anime, index) {
    if (!anime.seasons || anime.seasons.length === 0) {
        return `<a href="#" class="watch-btn" style="background: #ffe3e3; color: #fa5252;">‚ö†Ô∏è –ù–µ—Ç —Å–µ–∑–æ–Ω–æ–≤</a>`;
    }
    
    if (anime.seasons.length === 1) {
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ–∑–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        return `<a href="${anime.seasons[0].link}" target="_blank" class="watch-btn">üé¨ –°–º–æ—Ç—Ä–µ—Ç—å</a>`;
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∑–æ–Ω–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
        const seasonsList = anime.seasons.map((season, seasonIndex) => `
            <div class="season-item" onclick="window.open('${season.link}', '_blank')">
                <div class="season-name">${season.name}</div>
                <div class="season-episodes">${season.episodes} —ç–ø–∏–∑–æ–¥–æ–≤</div>
            </div>
        `).join('');
        
        return `
            <div class="seasons-dropdown">
                <div class="watch-btn" onclick="toggleSeasonsMenu(this)">
                    üé¨ –°–º–æ—Ç—Ä–µ—Ç—å (${anime.seasons.length} ${getSeasonWord(anime.seasons.length)})
                </div>
                <div class="seasons-menu">
                    ${seasonsList}
                </div>
            </div>
        `;
    }
}

function getSeasonWord(count) {
    if (count % 10 === 1 && count % 100 !== 11) return '—Å–µ–∑–æ–Ω';
    if (count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 10 || count % 100 >= 20)) return '—Å–µ–∑–æ–Ω–∞';
    return '—Å–µ–∑–æ–Ω–æ–≤';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é —Å–µ–∑–æ–Ω–æ–≤
function toggleSeasonsMenu(element) {
    const menu = element.nextElementSibling;
    const isVisible = menu.classList.contains('show');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–µ–Ω—é
    document.querySelectorAll('.seasons-menu.show').forEach(openMenu => {
        if (openMenu !== menu) {
            openMenu.classList.remove('show');
        }
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    if (isVisible) {
        menu.classList.remove('show');
    } else {
        menu.classList.add('show');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
function toggleDetails(element) {
    const animeItem = element.closest('.anime-item');
    const detailsSection = animeItem.querySelector('.details-section');
    const isExpanded = animeItem.classList.contains('expanded');
    
    if (isExpanded) {
        animeItem.classList.remove('expanded');
        element.textContent = 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏';
        detailsSection.querySelectorAll('.voice-actors, .comments-section').forEach(el => {
            el.style.display = 'none';
        });
    } else {
        animeItem.classList.add('expanded');
        element.textContent = 'üìã –°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function toggleComments(element) {
    const commentsSection = element.closest('.comments-section');
    const commentForm = commentsSection.querySelector('.comment-form');
    const commentsList = commentsSection.querySelector('.comments-list');
    const showMoreButton = commentsSection.querySelector('.show-more-comments');
    
    const isVisible = commentForm.style.display !== 'none';
    
    if (isVisible) {
        commentForm.style.display = 'none';
        commentsList.style.display = 'none';
        if (showMoreButton) showMoreButton.style.display = 'none';
    } else {
        commentForm.style.display = 'block';
        commentsList.style.display = 'block';
        if (showMoreButton) showMoreButton.style.display = 'block';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function generateCommentsHTML(anime, index, limit = null) {
    if (!anime.comments || anime.comments.length === 0) {
        return '<div class="no-comments">–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>';
    }
    
    const commentsToShow = limit ? anime.comments.slice(0, limit) : anime.comments;
    
    return commentsToShow.map((comment, commentIndex) => {
        const isCurrentUserComment = comment.author === (currentUser ? currentUser.username : '');
        const editDeleteButtons = isCurrentUserComment ? `
            <button class="edit-comment-btn" onclick="editComment(${index}, ${commentIndex})">‚úèÔ∏è</button>
            <button class="delete-comment-btn" onclick="deleteComment(${index}, ${commentIndex})">√ó</button>
        ` : (isAdmin ? `<button class="delete-comment-btn" onclick="deleteComment(${index}, ${commentIndex})">√ó</button>` : '');
        
        return `
            <div class="comment-item" id="comment-${index}-${commentIndex}">
                ${editDeleteButtons}
                <div class="comment-author">
                    <img src="${comment.avatar}" alt="–ê–≤–∞—Ç–∞—Ä" class="author-avatar">
                    ${comment.author}
                </div>
                <div class="comment-text">${comment.text}</div>
                <div class="comment-date">${formatDate(comment.date)}</div>
            </div>
        `;
    }).join('');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function addComment(animeIndex) {
    if (!isLoggedIn) {
        showNotification("–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏");
        return;
    }
    
    const commentInput = document.getElementById(`commentInput-${animeIndex}`);
    const commentText = commentInput.value.trim();
    
    if (!commentText) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
        return;
    }
    
    if (!animeList[animeIndex].comments) {
        animeList[animeIndex].comments = [];
    }
    
    const newComment = {
        author: currentUser.username,
        avatar: currentUser.avatar,
        text: commentText,
        date: new Date().toISOString().replace('T', ' ').substring(0, 16)
    };
    
    animeList[animeIndex].comments.unshift(newComment);
    saveToLocalStorage();
    displayAnimeList(animeList);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    commentInput.value = '';
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function editComment(animeIndex, commentIndex) {
    const comment = animeList[animeIndex].comments[commentIndex];
    const commentElement = document.getElementById(`comment-${animeIndex}-${commentIndex}`);
    
    commentElement.innerHTML = `
        <div class="comment-author">
            <img src="${comment.avatar}" alt="–ê–≤–∞—Ç–∞—Ä" class="author-avatar">
            ${comment.author}
        </div>
        <div class="comment-edit-form">
            <textarea class="comment-edit-input">${comment.text}</textarea>
            <div class="comment-edit-buttons">
                <button class="save-edit-btn" onclick="saveCommentEdit(${animeIndex}, ${commentIndex})">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="cancel-edit-btn" onclick="displayAnimeList(animeList)">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
        <div class="comment-date">${formatDate(comment.date)}</div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function saveCommentEdit(animeIndex, commentIndex) {
    const commentElement = document.getElementById(`comment-${animeIndex}-${commentIndex}`);
    const editInput = commentElement.querySelector('.comment-edit-input');
    const newText = editInput.value.trim();
    
    if (!newText) {
        alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }
    
    animeList[animeIndex].comments[commentIndex].text = newText;
    animeList[animeIndex].comments[commentIndex].date = new Date().toISOString().replace('T', ' ').substring(0, 16);
    
    saveToLocalStorage();
    displayAnimeList(animeList);
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function deleteComment(animeIndex, commentIndex) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')) {
        return;
    }
    
    animeList[animeIndex].comments.splice(commentIndex, 1);
    saveToLocalStorage();
    displayAnimeList(animeList);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function showAllComments(animeIndex) {
    const anime = animeList[animeIndex];
    const commentsHTML = generateCommentsHTML(anime, animeIndex);
    
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'block';
    modal.innerHTML = `
        <div class="modal-content">
            <h2 style="margin-bottom: 15px; color: #d63384;">üí¨ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ "${anime.title}"</h2>
            <div class="comments-list" style="max-height: 350px;">
                ${commentsHTML}
            </div>
            <div class="btn-group" style="margin-top: 15px;">
                <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
                ${isAdmin && anime.comments && anime.comments.length > 0 ? 
                    `<button class="btn btn-primary" onclick="clearAllComments(${animeIndex})">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</button>` : ''}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
function clearAllComments(animeIndex) {
    if (!isAdmin) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –∞–Ω–∏–º–µ?')) {
        animeList[animeIndex].comments = [];
        saveToLocalStorage();
        displayAnimeList(animeList);
        document.querySelector('.modal').remove();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
document.getElementById('avatarInput').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            currentUser.avatar = e.target.result;
            document.getElementById('userAvatar').src = e.target.result;
            saveCurrentUserToLocalStorage();
            showNotification("–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!");
        };
        reader.readAsDataURL(file);
    }
});

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
function copyToClipboard(text) {
    navigator.clipboard.writeText(text.replace(/\s/g, '')).then(() => {
        showCopyNotification();
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
function showCopyNotification() {
    const notification = document.getElementById('copyNotification');
    notification.textContent = '–†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã! üìã';
    notification.classList.add('show');
    setTimeout(() => {
        notification.classList.remove('show');
    }, 2000);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ–±—ã—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.getElementById('copyNotification');
    notification.textContent = message;
    notification.classList.add('show');
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ
function editAnime(index) {
    if (!isAdmin) return;
    
    const anime = animeList[index];
    currentEditIndex = index;
    
    document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∏–º–µ';
    document.getElementById('modalSubmit').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    document.getElementById('editIndex').value = index;
    
    document.getElementById('animeTitle').value = anime.title;
    document.getElementById('animeStudio').value = anime.studio;
    document.getElementById('animeVoiceType').value = anime.voiceType;
    document.getElementById('animeVoiceYear').value = anime.voiceYear;
    document.getElementById('animeDescription').value = anime.description;
    document.getElementById('animePosterUrl').value = '';
    document.getElementById('animeVoiceActors').value = anime.voiceActors ? anime.voiceActors.join('\n') : '';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    document.getElementById('animeRating').value = anime.rating;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤–µ–∑–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
    setRatingStars(anime.rating || 0);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–≤—å—é
    document.getElementById('imagePreview').innerHTML = `<img src="${anime.poster}" alt="–ü—Ä–µ–≤—å—é">`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∑–æ–Ω—ã
    loadSeasonsData(anime.seasons);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—à–ª—ã
    loadSpecialsData(anime.specials);
    
    openModal();
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ
function deleteAnime(index) {
    if (!isAdmin) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∞–Ω–∏–º–µ?')) {
        animeList.splice(index, 1);
        saveToLocalStorage();
        displayAnimeList(animeList);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ –æ–∑–≤—É—á–∫–∏
function getVoiceTypeText(type) {
    const types = {
        'dub': '–î—É–±–ª—è–∂',
        'recap': '–†–µ–∫–∞—Å—Ç',
        'offscreen': '–ó–∞–∫–∞–¥—Ä–æ–≤–∞—è'
    };
    return types[type] || type;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function setFilter(filter) {
    currentFilter = filter;
    updateFilterButtons();
    displayAnimeList(animeList);
}

function toggleBestFilter() {
    currentBestFilter = !currentBestFilter;
    updateFilterButtons();
    displayAnimeList(animeList);
}

function setYearFilter(filter) {
    currentYearFilter = filter;
    updateFilterButtons();
    displayAnimeList(animeList);
}

function updateFilterButtons() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É
    if (currentFilter !== 'all') {
        document.querySelector(`.filter-btn[onclick="setFilter('${currentFilter}')"]`).classList.add('active');
    } else {
        document.querySelector('.filter-btn[onclick="setFilter(\'all\')"]').classList.add('active');
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–õ—É—á—à–µ–µ" –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (currentBestFilter) {
        document.getElementById('bestFilter').classList.add('active');
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥–æ–¥—É –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (currentYearFilter !== 'none') {
        document.getElementById(`${currentYearFilter}Filter`).classList.add('active');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
function setupRatingStars() {
    const stars = document.querySelectorAll('.rating-star');
    stars.forEach(star => {
        star.addEventListener('click', function() {
            const rating = parseInt(this.getAttribute('data-rating'));
            setRatingStars(rating);
        });
        
        star.addEventListener('mouseover', function() {
            const rating = parseInt(this.getAttribute('data-rating'));
            highlightStars(rating);
        });
    });
    
    document.getElementById('ratingStars').addEventListener('mouseleave', function() {
        const currentRating = parseInt(document.getElementById('animeRating').value);
        highlightStars(currentRating);
    });
}

function setRatingStars(rating) {
    document.getElementById('animeRating').value = rating;
    document.getElementById('ratingValue').textContent = `${rating}/5`;
    highlightStars(rating);
}

function highlightStars(rating) {
    const stars = document.querySelectorAll('.rating-star');
    stars.forEach((star, index) => {
        if (index < rating) {
            star.classList.add('active');
            star.textContent = '‚≠ê';
        } else {
            star.classList.remove('active');
            star.textContent = '‚òÜ';
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function toggleAdminMode() {
    if (!isAdmin) {
        document.getElementById('loginModal').classList.add('active');
    }
}

function logoutAdmin() {
    isAdmin = false;
    updateAdminUI();
    displayAnimeList(animeList);
    showNotification("–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω");
}

function updateAdminUI() {
    const adminPanel = document.getElementById('adminPanel');
    const adminStatus = document.getElementById('adminStatus');
    const adminToggle = document.getElementById('adminToggle');
    const logoutBtn = document.getElementById('logoutBtn');
    const addBtn = document.getElementById('addBtn');
    
    if (isAdmin) {
        adminPanel.style.display = 'block';
        adminStatus.textContent = 'üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞';
        adminStatus.className = 'admin-status on';
        adminToggle.style.display = 'none';
        logoutBtn.style.display = 'block';
        addBtn.style.display = 'block';
        addBtn.disabled = false;
    } else {
        adminPanel.style.display = 'none';
        adminStatus.textContent = 'üîê –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        adminStatus.className = 'admin-status off';
        adminToggle.style.display = 'block';
        logoutBtn.style.display = 'none';
        addBtn.style.display = 'none';
        addBtn.disabled = true;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function openModal() {
    document.getElementById('animeModal').style.display = 'block';
}

function openAddModal() {
    if (!isAdmin) return;
    
    document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ';
    document.getElementById('modalSubmit').textContent = '–î–æ–±–∞–≤–∏—Ç—å';
    document.getElementById('editIndex').value = '-1';
    document.getElementById('animeForm').reset();
    document.getElementById('imagePreview').innerHTML = '<span style="color: #f8bbd9;">–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–µ—Ä–∞</span>';
    setRatingStars(0);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–∑–æ–Ω—ã (–¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    loadSeasonsData([]);
    loadSpecialsData([]);
    
    openModal();
}

function closeModal() {
    document.getElementById('animeModal').style.display = 'none';
    currentEditIndex = -1;
}

function closeLoginModal() {
    document.getElementById('loginModal').classList.remove('active');
    document.getElementById('loginForm').reset();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
document.getElementById('loginForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const password = document.getElementById('adminPassword').value;
    
    if (password === ADMIN_PASSWORD) {
        isAdmin = true;
        updateAdminUI();
        displayAnimeList(animeList);
        closeLoginModal();
        showNotification("–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω! üëë");
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞–Ω–∏–º–µ
document.getElementById('animeForm').addEventListener('submit', function(e) {
    e.preventDefault();
    if (!isAdmin) return;
    
    const title = document.getElementById('animeTitle').value;
    const studio = document.getElementById('animeStudio').value;
    const voiceType = document.getElementById('animeVoiceType').value;
    const voiceYear = parseInt(document.getElementById('animeVoiceYear').value);
    const description = document.getElementById('animeDescription').value;
    const voiceActorsText = document.getElementById('animeVoiceActors').value;
    const rating = parseInt(document.getElementById('animeRating').value);
    const editIndex = document.getElementById('editIndex').value;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–Ω–∏–º–µ "–ª—É—á—à–∏–º" (—Ä–µ–π—Ç–∏–Ω–≥ 4+)
    const isBest = rating >= 4;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–µ—Ä—ã –æ–∑–≤—É—á–∫–∏
    const voiceActors = voiceActorsText
        .split('\n')
        .filter(line => line.trim() !== '')
        .map(line => line.trim());
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–µ—Ä –∏–∑ URL –∏–ª–∏ —Ñ–∞–π–ª–∞
    const posterUrl = document.getElementById('animePosterUrl').value;
    const posterFile = document.getElementById('animePosterFile').files[0];
    
    let poster = posterUrl;
    
    if (posterFile) {
        const reader = new FileReader();
        reader.onload = function(e) {
            poster = e.target.result;
            saveAnime(title, studio, voiceType, voiceYear, description, voiceActors, poster, rating, isBest, editIndex);
        };
        reader.readAsDataURL(posterFile);
    } else {
        // –ï—Å–ª–∏ URL –Ω–µ —É–∫–∞–∑–∞–Ω –∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç–µ—Ä
        if (!poster && editIndex !== '-1') {
            poster = animeList[editIndex].poster;
        }
        saveAnime(title, studio, voiceType, voiceYear, description, voiceActors, poster, rating, isBest, editIndex);
    }
});

function saveAnime(title, studio, voiceType, voiceYear, description, voiceActors, poster, rating, isBest, editIndex) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∑–æ–Ω–æ–≤
    const seasons = getSeasonsData();
    const specials = getSpecialsData();
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!poster) {
        poster = `https://via.placeholder.com/1000x1500/ffeef2/d63384?text=${encodeURIComponent(title)}`;
    }
    
    const animeData = {
        title,
        studio,
        voiceType,
        voiceYear,
        description,
        poster,
        voiceActors,
        rating,
        userRatings: editIndex !== '-1' ? animeList[editIndex].userRatings || [] : [],
        isBest,
        seasons,
        specials,
        comments: editIndex !== '-1' ? animeList[editIndex].comments || [] : []
    };
    
    if (editIndex === '-1') {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∏–º–µ
        animeList.push(animeData);
        showNotification(`–ê–Ω–∏–º–µ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω–æ!`);
    } else {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–Ω–∏–º–µ
        animeList[editIndex] = animeData;
        showNotification(`–ê–Ω–∏–º–µ "${title}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
    }
    
    saveToLocalStorage();
    displayAnimeList(animeList);
    closeModal();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–µ–∑–æ–Ω–æ–≤
function addSeason(seasonData = null) {
    const seasonsList = document.getElementById('seasonsList');
    const seasonIndex = seasonsList.children.length;
    
    const seasonEditor = document.createElement('div');
    seasonEditor.className = 'season-editor-item';
    seasonEditor.innerHTML = `
        <div class="season-editor-header">
            <div class="season-number">–°–µ–∑–æ–Ω ${seasonIndex + 1}</div>
            <button type="button" class="remove-season-btn" onclick="removeSeason(this)">√ó</button>
        </div>
        <div class="season-fields">
            <div class="season-field">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞</label>
                <input type="text" class="season-name" value="${seasonData ? seasonData.name : `–°–µ–∑–æ–Ω ${seasonIndex + 1}`}" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ–∑–æ–Ω 1">
            </div>
            <div class="season-field">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤</label>
                <input type="number" class="season-episodes" value="${seasonData ? seasonData.episodes : 12}" min="1" max="1000">
            </div>
            <div class="season-field full-width">
                <label>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</label>
                <input type="url" class="season-link" value="${seasonData ? seasonData.link : ''}" placeholder="https://example.com/season1">
            </div>
        </div>
    `;
    
    seasonsList.appendChild(seasonEditor);
}

function removeSeason(button) {
    const seasonEditor = button.closest('.season-editor-item');
    seasonEditor.remove();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å–µ–∑–æ–Ω–æ–≤
    const seasonsList = document.getElementById('seasonsList');
    Array.from(seasonsList.children).forEach((editor, index) => {
        editor.querySelector('.season-number').textContent = `–°–µ–∑–æ–Ω ${index + 1}`;
    });
}

function getSeasonsData() {
    const seasonsList = document.getElementById('seasonsList');
    const seasons = [];
    
    Array.from(seasonsList.children).forEach(editor => {
        const name = editor.querySelector('.season-name').value;
        const episodes = parseInt(editor.querySelector('.season-episodes').value);
        const link = editor.querySelector('.season-link').value;
        
        if (name && link) {
            seasons.push({
                name,
                episodes,
                link
            });
        }
    });
    
    return seasons;
}

function loadSeasonsData(seasons) {
    const seasonsList = document.getElementById('seasonsList');
    seasonsList.innerHTML = '';
    
    if (seasons && seasons.length > 0) {
        seasons.forEach(season => {
            addSeason(season);
        });
    } else {
        addSeason(); // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Å–µ–∑–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–ø–µ—à–ª–æ–≤
function addSpecial(specialData = null) {
    const specialsList = document.getElementById('specialsList');
    const specialIndex = specialsList.children.length;
    
    const specialEditor = document.createElement('div');
    specialEditor.className = 'season-editor-item';
    specialEditor.innerHTML = `
        <div class="season-editor-header">
            <div class="season-number">–°–ø–µ—à–ª ${specialIndex + 1}</div>
            <button type="button" class="remove-season-btn" onclick="removeSpecial(this)">√ó</button>
        </div>
        <div class="season-fields">
            <div class="season-field">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—à–ª–∞</label>
                <input type="text" class="special-name" value="${specialData ? specialData.name : `OVA ${specialIndex + 1}`}" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: OVA 1">
            </div>
            <div class="season-field">
                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤</label>
                <input type="number" class="special-episodes" value="${specialData ? specialData.episodes : 1}" min="1" max="100">
            </div>
            <div class="season-field full-width">
                <label>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</label>
                <input type="url" class="special-link" value="${specialData ? specialData.link : ''}" placeholder="https://example.com/ova1">
            </div>
        </div>
    `;
    
    specialsList.appendChild(specialEditor);
}

function removeSpecial(button) {
    const specialEditor = button.closest('.season-editor-item');
    specialEditor.remove();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å–ø–µ—à–ª–æ–≤
    const specialsList = document.getElementById('specialsList');
    Array.from(specialsList.children).forEach((editor, index) => {
        editor.querySelector('.season-number').textContent = `–°–ø–µ—à–ª ${index + 1}`;
    });
}

function getSpecialsData() {
    const specialsList = document.getElementById('specialsList');
    const specials = [];
    
    Array.from(specialsList.children).forEach(editor => {
        const name = editor.querySelector('.special-name').value;
        const episodes = parseInt(editor.querySelector('.special-episodes').value);
        const link = editor.querySelector('.special-link').value;
        
        if (name && link) {
            specials.push({
                name,
                episodes,
                link
            });
        }
    });
    
    return specials;
}

function loadSpecialsData(specials) {
    const specialsList = document.getElementById('specialsList');
    specialsList.innerHTML = '';
    
    if (specials && specials.length > 0) {
        specials.forEach(special => {
            addSpecial(special);
        });
    }
}

// –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
document.getElementById('animePosterFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            document.getElementById('imagePreview').innerHTML = `<img src="${e.target.result}" alt="–ü—Ä–µ–≤—å—é">`;
        };
        reader.readAsDataURL(file);
    }
});

document.getElementById('animePosterUrl').addEventListener('input', function(e) {
    const url = e.target.value;
    if (url) {
        document.getElementById('imagePreview').innerHTML = `<img src="${url}" alt="–ü—Ä–µ–≤—å—é" onerror="this.parentElement.innerHTML='<span style=\\'color: #f8bbd9;\\'>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</span>'">`;
    }
});

// –ü–æ–∏—Å–∫
document.getElementById('searchInput').addEventListener('input', function(e) {
    const searchTerm = e.target.value.toLowerCase();
    const filteredList = animeList.filter(anime => 
        anime.title.toLowerCase().includes(searchTerm) ||
        anime.studio.toLowerCase().includes(searchTerm) ||
        anime.description.toLowerCase().includes(searchTerm) ||
        (anime.voiceActors && anime.voiceActors.some(actor => 
            actor.toLowerCase().includes(searchTerm)
        )) ||
        (anime.comments && anime.comments.some(comment =>
            comment.text.toLowerCase().includes(searchTerm) ||
            comment.author.toLowerCase().includes(searchTerm)
        ))
    );
    displayAnimeList(filteredList);
});

// Local Storage —Ñ—É–Ω–∫—Ü–∏–∏
function saveToLocalStorage() {
    localStorage.setItem('animeList', JSON.stringify(animeList));
}

function loadFromLocalStorage() {
    const saved = localStorage.getItem('animeList');
    if (saved) {
        animeList = JSON.parse(saved);
    }
    
    const savedBackground = localStorage.getItem('userBackground');
    if (savedBackground) {
        document.body.style.background = savedBackground;
    }
}

function saveUsersToLocalStorage() {
    localStorage.setItem('users', JSON.stringify(users));
}

function loadUsersFromLocalStorage() {
    const saved = localStorage.getItem('users');
    if (saved) {
        users = JSON.parse(saved);
    }
}

function saveCurrentUserToLocalStorage() {
    localStorage.setItem('currentUser', JSON.stringify(currentUser));
    localStorage.setItem('isLoggedIn', isLoggedIn.toString());
}

function loadCurrentUserFromLocalStorage() {
    const savedUser = localStorage.getItem('currentUser');
    const savedLogin = localStorage.getItem('isLoggedIn');
    
    if (savedUser && savedLogin === 'true') {
        currentUser = JSON.parse(savedUser);
        isLoggedIn = true;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event listeners
function setupEventListeners() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(e) {
        if (e.target === document.getElementById('animeModal')) {
            closeModal();
        }
        if (e.target === document.getElementById('loginModal')) {
            closeLoginModal();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å–µ–∑–æ–Ω–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.seasons-dropdown')) {
            document.querySelectorAll('.seasons-menu.show').forEach(menu => {
                menu.classList.remove('show');
            });
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', init);
